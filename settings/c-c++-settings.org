#+TITLE: C-C++ Settings

#+begin_src emacs-lisp
;;; c-c++-settings.el --- c/c++ settings -*- lexical-binding: t -*-
(setq-default c-default-style "linux"
              c-basic-offset 4)
#+end_src

* code formating
#+begin_src emacs-lisp
(defun astyle-region (pmin pmax)
  (interactive "r")
  (shell-command-on-region pmin pmax
                           "astyle --style=mozilla -k1 -A16 -p -xd --keep-one-line-blocks " ;; add options here...
                           (current-buffer) t
                           (get-buffer-create "*Astyle Errors*") t))
#+end_src

* rtags
#+begin_src emacs-lisp
(use-package rtags
  :after evil
  ;; Note that if you recompile and create new compile_commands.json
  ;; you will need to run "rc -J ." for rtags to reflect the changes.
  ;; REMEMBER RTAGS DOES NOT WORK FOR PROJECTS INSIDE /tmp
  :hook 
  (((c-mode c++-mode) . rtags-start-process-unless-running)
   ((c-mode c++-mode) . electric-pair-mode) ; auto pair '(', '{', '['
   (rtags-jump . evil-set-jump))
    
  :init
  
  (setq rtags-completions-enabled t)
  (setq lsp-enable-file-watchers nil) 

  (defun my/c-c++-tags-find-symbol-at-point (&optional prefix)
    (interactive "P")
    (if (and (not (rtags-find-symbol-at-point prefix))
             rtags-last-request-not-indexed)
        (evil-jump-to-tag)))

  (defun my/c-c++-tags-find-references-at-point (&optional prefix)
    (interactive "P")
    (if (and (not (rtags-find-references-at-point prefix))
             rtags-last-request-not-indexed)
        (evil-jump-to-tag)))

  (defun my/c-c++-tags-find-symbol ()
    (interactive)
    (call-interactively  'rtags-find-symbol))

  (defun spacemacs/rtags-define-keys-for-mode (mode)
    (spacemacs/set-leader-keys-for-major-mode mode
      ".."  'my/c-c++-tags-find-symbol-at-point
      ".,"  'my/c-c++-tags-find-references-at-point
      "./"  'rtags-find-all-references-at-point
      ".<"  '(lambda () (interactive) (call-interactively 'rtags-find-references))
      ".>"  '(lambda () (interactive) (call-interactively 'rtags-find-symbol))

      ".f"  'rtags-find-symbol-at-point
      ".r"  'rtags-references-tree
      ".R"  'rtags-rename-symbol
      ".T"  'rtags-taglist
      ".h"  'rtags-print-class-hierarchy
      ".v"  'rtags-find-virtuals-at-point
      ".c"  'c-toggle-comment-style
      )
    )

  (spacemacs/rtags-define-keys-for-mode 'c-mode)
  (spacemacs/rtags-define-keys-for-mode 'c++-mode)

  (setq mode-prefixes '(("m."  . "rtags")
                        ("m.," . "rtags-find-references-at-point")
                        ("m.." . "rtags-find-symbol-at-point")
                        ("m.<" . "rtags-find-references")
                        ("m.>" . "rtags-find-symbol")))
  
  (loop for (pfx . name) in mode-prefixes
        collect (progn
        (spacemacs/declare-prefix-for-mode  'c++-mode pfx name)
        (spacemacs/declare-prefix-for-mode  'c-mode pfx name)))

  :config

  (advice-add 'rtags-show-in-other-window
   :around
    (lambda (oldfn &rest args)
      (let ((window (selected-window))) (apply oldfn args)
           (run-at-time ".1 sec" nil
                        `(lambda () (select-window (get-mru-window 'visible nil t))
                           (recenter)
                           (select-window ,window))))))

  (advice-add 'rtags-find-symbol-at-point 
   :around (lambda (oldfn &rest args)
             (apply oldfn args)
             (run-at-time ".1 sec" nil #'recenter)
             (redraw-display)))

  (advice-add 'rtags-references-tree 
   :after (lambda () (pop-to-buffer rtags-buffer-name)))


  ) ; End use-package rtags
#+end_src

* EOF (`provide' This Package)
#+begin_src emacs-lisp
(provide 'c-c++-settings)
#+end_src
